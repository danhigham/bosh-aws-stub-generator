#!/usr/bin/ruby

require 'erb'
require 'ostruct'

placeholders = {
"placeholder_name"                                 => "hnrglobal",    # The Name of the Cloud Foundry install
"placeholder_director_uuid"                        => "",             # The director UUID - run 'bosh status' to get the UUID
"placeholder_access_key_id"                        => "",             # AWS Access Key
"placeholder_secret_key"                           => '',             # AWS Secret Key
"placeholder_subnet_for_az1"                       => '',             # Get this value from AWS Console ie subnet-679a7c10
"placeholder_subnet_for_az2"                       => '',             # Get this value from AWS Console ie subnet-679a7c10
"placeholder_domain"                               => '',             # domain ie cloud.example.com
"placeholder_uaa_cert"                             => '', 
"placeholder_uaa_jwt_signing_key"                  => '',              # Use the YAML "|" character to format multiline RSA key data
"placeholder_uaa_jwt_verification_key"             => '',              # Use the YAML "|" character to format multiline RSA key data
"placeholder_uaadb_properties"                     => '',             # get from aws_rds_receipt.yml
"placeholder_ccdb_properties"                      => '',             # get from aws_rds_receipt.yml
#"placeholder_nats_user"                            => '',
#"placeholder_nats_password"                        => '',             # auto generated by this script.
#"placeholder_cc_db_encryption_key"                 => '',
#"placeholder_bulk_api_password"                    => '',
#"placeholder_staging_upload_password"              => '',
#"placeholder_staging_upload_user"                  => '',
#"placeholder_uaa_admin_client_secret"              => '',
#"placeholder_uaa_clients_login_secret"             => '',
#"placeholder_uaa_clients_developer_console_secret" => '',
#"placeholder_uaa_clients_app_direct_secret"        => '',
#"placeholder_uaa_clients_support_services_secret"  => '',
#"placeholder_uaa_clients_servicesmgmt_secret"      => '',
#"placeholder_uaa_clients_space_mail_secret"        => '',
#"placeholder_uaa_clients_notification_secret"      => '',
#"placeholder_uaa_batch_username"                   => '',
#"placeholder_uaa_batch_password"                   => '',
#"placeholder_uaa_cc_client_secret"                 => '',
#"placeholder_router_status_user"                   => '',
#"placeholder_router_status_password"               => '',
#:placeholder_loggregator_secret                    => "" 
}

class ErbBinding < OpenStruct
    def get_binding
        return binding()
    end
end

def generatePassword ()
  o = [('a'..'z'), ('A'..'Z')].map { |i| i.to_a }.flatten
  string = (0...20).map { o[rand(o.length)] }.join
  return string
end





placeholders["placeholder_nats_password"] = generatePassword() 
placeholders["placeholder_nats_user"] = generatePassword() 
placeholders["placeholder_cc_db_encryption_key"] = generatePassword() 
placeholders["placeholder_bulk_api_password"] = generatePassword() 
placeholders["placeholder_staging_upload_password"] = generatePassword()
placeholders["placeholder_staging_upload_user"] = generatePassword()
placeholders["placeholder_uaa_admin_client_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_login_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_developer_console_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_app_direct_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_support_services_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_servicesmgmt_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_space_mail_secret"] = generatePassword()
placeholders["placeholder_uaa_clients_notification_secret"] = generatePassword()
placeholders["placeholder_uaa_batch_username"] = generatePassword()
placeholders["placeholder_uaa_batch_password"] = generatePassword()
placeholders["placeholder_uaa_cc_client_secret"] = generatePassword()
placeholders["placeholder_router_status_user"] = generatePassword()
placeholders["placeholder_router_status_password"] = generatePassword()
placeholders["placeholder_loggregator_secret"] = generatePassword()













vars = ErbBinding.new(placeholders)

template = "foo <%= bar %>"
template = File.read("./template.erb")
erb = ERB.new(template)

vars_binding = vars.send(:get_binding)
puts erb.result(vars_binding)




#ns = Namespace.new(placeholders)
#print ERB.new(template).result(ns.instance_eval { binding })


#puts placeholders

#new_file = File.open("./result.txt", "w+")
#puts ErbalT::render_from_hash(template, placeholders)
#new_file.close

#puts placeholders["PLACEHOLDER_LOGGREGATOR_SECRET"]

#foo = Foo.new
#foo.PLACEHOLDER_NATS_PASSWORD = "Hello"
#new_file << ERB.new(template).result(foo.template_binding)
#new_file.close
